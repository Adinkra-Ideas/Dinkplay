{\rtf1\ansi\ansicpg1252\deff0\nouicompat{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green255\blue255;\red0\green0\blue255;\red192\green192\blue192;\red255\green0\blue0;\red255\green255\blue255;\red255\green255\blue0;}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard\sl276\slmult1\highlight1\ul\b\f0\fs28\lang7 To use Git from a new Computer \highlight0\ulnone\b0\fs22 where you're not currently logged in, Clone from the repository, and from inside the local repo you just cloned, use the following to identify yourself.\par
git config --global user.email "you@example.com" \tab /* your email address for github" */\par
git config --global user.name "Your Name"\tab\tab /* Your username for github */\par
Then try to push a modification, and you will receive a pin or whatever method that will be easy for you to use when loggin in.\par
\par
\par
\par
This works for both git log and gitk - the 2 most common ways of viewing history.\par
You don't need to use the whole name:\par
\par
git log --author="Jon"\par
will match a commit made by "Jonathan Smith"\par
\par
git log --author=Jon\par
and\par
\par
git log --author=Smith\par
would also work. The quotes are optional if you don't need any spaces.\par
\par
Add --all if you intend to search all branches and not just the current commit's ancestors in your repo.\par
\par
Git branch tutorial\par
{{\field{\*\fldinst{HYPERLINK https://www.atlassian.com/git/tutorials/using-branches/git-checkout }}{\fldrslt{https://www.atlassian.com/git/tutorials/using-branches/git-checkout\ul0\cf0}}}}\f0\fs22\par
{{\field{\*\fldinst{HYPERLINK https://www.nobledesktop.com/learn/git/git-branches }}{\fldrslt{https://www.nobledesktop.com/learn/git/git-branches\ul0\cf0}}}}\f0\fs22\par
\par
\par
\b CHANGE ORIGIN REPO\par
\b0 STEP 1\par
manually delete any current \b  .git \b0  directory, then\par
\highlight3\b git init\par
\highlight0\b0 STEP 2\par
The default init is named \b master\b0  to change it to \b main\b0  so that it blends into github's \b main\b0  branch do \b git branch -m main\b0\par
\highlight3\b git remote add -f main {{\field{\*\fldinst{HYPERLINK https://github.com/your-repo-url.git }}{\fldrslt{https://github.com/your-repo-url.git\ul0\cf0}}}}\highlight0\f0\fs22  \b0 and then, add your files using \b git add .\b0  and \b git commit -m ""\b0  but when you want to push, push like so;\par
\highlight3\b git push \highlight4 --force\highlight3  --set-upstream {{\field{\*\fldinst{HYPERLINK https://github.com/your-repo-url.git }}{\fldrslt{https://github.com/your-repo-url.git\ul0\cf0}}}}\f0\fs22  main\b0\par
\highlight0\par
\par
\b CREATE A NEW BRANCH \par
\highlight3\b0 git checkout -b my-branch-name\highlight0\par
\par
\b THEN PUSH NEW BRANCH FROM LOCAL TO REMOTE\par
\b0 A newly-created Local Repository is uploaded as a new repository to remote git with\par
\highlight3\b git push origin -u \cf5 local_repo_name\cf0\par
\highlight0\b0\par
\ul\b PUSHING TO ANOTHER REMOTE THAT IS DIFFERENT FROM THE ONE YOU'RE WORKING ON\ulnone\par
\b0 In order to push your branch to another remote branch, use the \ldblquote git push\rdblquote  command and specify the remote name, the name of your local branch as the name of the remote branch:\par
If for instance, I cloned \b main33 \b0 branch and then modified some of its content, and I want to push this modification to \b myCustombranch\b0 , I will do:\par
\highlight3\b git push origin main33:myCustombranch\par
\highlight0\b0\par
\b SHOW WHICH REMOTE BRANCH IS SET AS "HEAD"\par
\highlight3 git remote show origin\par
\highlight0\b0\par
DELETE a BRANCH FROM LOCAL\par
\highlight3\b git branch -d localBranchName\par
\highlight0\b0\par
DELETE A BRANCH FROM REMOTE\par
\highlight3\b git push origin --delete remoteBranchName\par
\highlight0\b0\par
\par
\par
\ul\b Git Merge Master into Branch\b0\par
\highlight3\ulnone $ git checkout main\par
$ git pull\par
$ git checkout validator\par
$ git merge main\par
$ git push\highlight0\par
To merge from the remote main into the current branch, without updating the main branch locally, do;\highlight3\par
$ git checkout validator\par
$ git merge origin/main\par
$ git push\highlight0\par
\par
\par
GIT REPLACE ALL EXISTING LOCAL WITH REMOTE COPY\par
If you try to do the \b git pull\b0  after you have modified the files in your local repo, it will tell you to stash. Stash simply means to suspend your changes into thin air and clone the current remote repo. \par
\b git stash\par
\b0 Now that you have stashed your changes, you can do \b git pull\b0\par
After pulling the remote into your local, you might decide to either forget about the stash (\b git reset --hard\b0 ), or you might decide to add your changes into the current files (\b git stash pop\b0 )\par
\par
\ul\b GIT ROLL BACK A COMMIT AS IF THE SUBSEQUENT VERSIONS NEVER EXISTED\par
\ulnone\b0 NOTE: BE ULTRA CAREFUL NOT TO MAKE A MISTAKE AS THIS MIGHT DELETE OTHER BRANCHES. DELETES ARE IRREVERSIBLE!\par
First get the specific ID of the commit you want to roll-back to using \b git log\b0  \par
Then do like so\par
\highlight3 git reset --hard <old-commit-id>\par
git push -f <remote-name> <branch-name>  \highlight0 //z.B git push -f \b origin\b0  \b myBranchName\b0\par
In case you get the following errors:\par
\highlight4 fatal: 'n' does not appear to be a git repository\par
fatal: Could not read from remote repository.\par
Please make sure you have the correct access rights\par
and the repository exists.\par
\highlight0 then just follow the following process:\par
\highlight3 git remote rm origin\par
git commit -m "write_anything_here"\par
git remote add origin {{\field{\*\fldinst{HYPERLINK https://yourGithubRepo.git }}{\fldrslt{https://yourGithubRepo.git\ul0\cf0}}}}\f0\fs22\par
git push -f \b origin\b0  \b myBranchName\b0\par
git reset --hard <old-commit-id>\par
git push -f <remote-name> <branch-name>  \highlight0 //z.B git push -f \b origin\b0  \b myBranchName\b0\par
\par
\par
\par
\par
\par
\par
\par
IF YOU HAVE ACCESS TO SERVER SIDE; RUN THE FOLLOWING TO CHANGE ORIGIN HEAD\par
git symbolic-ref HEAD refs/heads/myCustomBranch\par
\par
There is a way to hack into remote-side of a git repository: thus allowing you to run remote commands from your local repo. It is codedly explained here as "git-server for the poor" {{\field{\*\fldinst{HYPERLINK https://michael-prokop.at/blog/2007/09/11/git-server-for-the-poor-git-update-server-info-rsync-and-remote-repository/ }}{\fldrslt{https://michael-prokop.at/blog/2007/09/11/git-server-for-the-poor-git-update-server-info-rsync-and-remote-repository/\ul0\cf0}}}}\f0\fs22\par
\par
\par
\par
\ul\b HOW TO ADD A .gitignore file\par
\ulnone\b0 Simply pasting a \b .gitignore \b0 in your root repo will not work most of the times. This is because, the git cache needs to be cleared. PLEASE BACKUP ANY CHANGES TO THE FILES IN YOUR LOCAL REPO BEFORE DOING THIS IN ORDER TO AVOID STORIES THAT TOUCH.\par
You will have to first do:\par
\highlight3\b git rm -fr --cached . \par
\highlight0\b0 Then do\par
\highlight3\b git add .\highlight0\b0\par
Now. the files listed in the .gitignore will no longer be tracked by git\par
\par
\par
\ul\b GIT PULL into a non-git local dir\par
\highlight3\ulnone git init\par
\highlight0\b0 then\par
\highlight3\b git pull <repo URL>\par
\highlight0\b0\par
Full git commands at {{\field{\*\fldinst{HYPERLINK https://git-scm.com/docs/gittutorial }}{\fldrslt{https://git-scm.com/docs/gittutorial\ul0\cf0}}}}\f0\fs22\par
\par
Continue from here {{\field{\*\fldinst{HYPERLINK https://www.coursera.org/learn/introduction-git-github/lecture/dp6Li/what-is-git }}{\fldrslt{https://www.coursera.org/learn/introduction-git-github/lecture/dp6Li/what-is-git\ul0\cf0}}}}\f0\fs22\par
\par
\par
\par
\highlight1\ul\b\fs28 HOW TO BACKDATE A GITHUB REPO LAST COMMIT\par
\highlight0\ulnone\b0\fs22 First clone a github\par
\highlight3\b git clone xxx\par
\highlight0\b0 now modify the files that you want to backdate their time of commit so that the get pushed when we push.\par
Then add the files for commiting\par
\highlight3\b git add -A\par
\highlight0\b0 then write your commit message\par
\highlight3\b git commit -m "commit message"\par
\highlight0\b0 then here comes the important part, enter this command\par
\highlight3\b GIT_COMMITTER_DATE="\highlight6 Fri Mar 3 13:45 2017 +0530\highlight3 " git commit --amend --date="\highlight6 Fri Mar 3 13:45 2017 +0530\highlight3 "\par
\highlight0\b0\par
It will cause nano to popup a generated file. This file is located at \b .git/COMMIT_EDITMSG\b0  relative to the root path if your local git repo and it contains the names of the files that you want to push in this commit, including the modified date, but they are all commented out\par
Comment out the \b modified date \b0 and the \b name of the files \b0 that you want to bear this modified date. then save using \b ctrl + o\b0  \par
now commit using \par
\highlight3\b git push --force\highlight0\b0\par
The modified files should now bear the new commit date on the github repo\par
Thanks to tutorial from  {\b{\field{\*\fldinst{HYPERLINK https://gist.github.com/PradyumnaKrishna/b0031d64210a79c3794d91720b30f8fa }}{\fldrslt{https://gist.github.com/PradyumnaKrishna/b0031d64210a79c3794d91720b30f8fa\ul0\cf0}}}}\f0\fs22\par
\par
\par
tests\par
npm run format\par
npm ci\par
npm run test:cov\par
npm run lint\par
\par
\par
\par
\par
\par
\par
}
 